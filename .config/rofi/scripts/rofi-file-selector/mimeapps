#!/usr/bin/env python3

from gi.repository import Gio
import sys
import os
import subprocess
from pathlib import Path

if len(sys.argv) < 2 or len(sys.argv) > 3:
    print('Error: At least one command line argument needed')
    sys.exit(1)

filename = sys.argv[1]
rofi_retv = int(os.getenv("ROFI_RETV", 0))


if rofi_retv == 2: # Custom entry argv[2] 
    # If user provide a custom entry, we launch the program in a terminal
    subprocess.Popen(["kitty", sys.argv[2], filename])
    sys.exit(0)

apps = dict()
if Path(filename).is_dir():
    content_type = "inode/directory"
else:
    content_type, val = Gio.content_type_guess(f'filename={filename}', data=None)
    if content_type == "application/octet-stream":
        with open(filename,'rb') as f:
            content_type, val = Gio.content_type_guess(f'filename={filename}',
                    data=f.read())
#print(content_type)
for app in Gio.app_info_get_all_for_type(content_type):
    apps[app.get_name()] = app

default_name = Gio.app_info_get_default_for_type(content_type, False).get_name()

sorted_apps = [default_name]
sorted_apps.extend(set(apps.keys()) - set([default_name]))

if len(sys.argv) == 2:
    #print(f"\0message\x1fType to filer of input program name ({filename} {content_type})\n")
    print("\0markup-rows\x1ftrue\n")
    print("\0message\x1f<i>use Ctrl˖+ to select and mark as default</i>\n")
    print(f"\0prompt\x1fOpen {content_type} with\n")
    for name in sorted_apps:
        app = apps[name]
        icon = app.get_icon()
        iconstr = f"icon\x1f{icon.to_string()}" if icon else ""
        meta = f"meta\x1f{app.get_executable()}"
        info = f"info\x1f{app.get_description()}"
        print(f"{name}\0{iconstr}\x1f{meta}\x1f{info}\n")
else:
    choosen_name = sys.argv[2]
    if rofi_retv == 10: # Custom kb 1 pressed → set as default
        apps[choosen_name].set_as_default_for_type(content_type)
    print(f"launch {filename} of type {content_type}  with {choosen_name}")
    apps[choosen_name].launch([Gio.File.parse_name(filename)], None)


